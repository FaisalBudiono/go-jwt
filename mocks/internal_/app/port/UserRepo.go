// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	domain "FaisalBudiono/go-jwt/internal/app/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"

	port "FaisalBudiono/go-jwt/internal/app/port"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

type UserRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepo) EXPECT() *UserRepo_Expecter {
	return &UserRepo_Expecter{mock: &_m.Mock}
}

// BeginTx provides a mock function with given fields: ctx
func (_m *UserRepo) BeginTx(ctx context.Context) (port.DBTx, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 port.DBTx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (port.DBTx, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) port.DBTx); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(port.DBTx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_BeginTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTx'
type UserRepo_BeginTx_Call struct {
	*mock.Call
}

// BeginTx is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UserRepo_Expecter) BeginTx(ctx interface{}) *UserRepo_BeginTx_Call {
	return &UserRepo_BeginTx_Call{Call: _e.mock.On("BeginTx", ctx)}
}

func (_c *UserRepo_BeginTx_Call) Run(run func(ctx context.Context)) *UserRepo_BeginTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UserRepo_BeginTx_Call) Return(_a0 port.DBTx, _a1 error) *UserRepo_BeginTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepo_BeginTx_Call) RunAndReturn(run func(context.Context) (port.DBTx, error)) *UserRepo_BeginTx_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserByEmail provides a mock function with given fields: ctx, email
func (_m *UserRepo) FindUserByEmail(ctx context.Context, email string) (domain.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByEmail")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_FindUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserByEmail'
type UserRepo_FindUserByEmail_Call struct {
	*mock.Call
}

// FindUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *UserRepo_Expecter) FindUserByEmail(ctx interface{}, email interface{}) *UserRepo_FindUserByEmail_Call {
	return &UserRepo_FindUserByEmail_Call{Call: _e.mock.On("FindUserByEmail", ctx, email)}
}

func (_c *UserRepo_FindUserByEmail_Call) Run(run func(ctx context.Context, email string)) *UserRepo_FindUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepo_FindUserByEmail_Call) Return(_a0 domain.User, _a1 error) *UserRepo_FindUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepo_FindUserByEmail_Call) RunAndReturn(run func(context.Context, string) (domain.User, error)) *UserRepo_FindUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserByID provides a mock function with given fields: ctx, userID
func (_m *UserRepo) FindUserByID(ctx context.Context, userID string) (domain.User, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByID")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_FindUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserByID'
type UserRepo_FindUserByID_Call struct {
	*mock.Call
}

// FindUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *UserRepo_Expecter) FindUserByID(ctx interface{}, userID interface{}) *UserRepo_FindUserByID_Call {
	return &UserRepo_FindUserByID_Call{Call: _e.mock.On("FindUserByID", ctx, userID)}
}

func (_c *UserRepo_FindUserByID_Call) Run(run func(ctx context.Context, userID string)) *UserRepo_FindUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepo_FindUserByID_Call) Return(_a0 domain.User, _a1 error) *UserRepo_FindUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepo_FindUserByID_Call) RunAndReturn(run func(context.Context, string) (domain.User, error)) *UserRepo_FindUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// InsertUser provides a mock function with given fields: ctx, u, tx
func (_m *UserRepo) InsertUser(ctx context.Context, u domain.User, tx port.DBTx) (domain.User, error) {
	ret := _m.Called(ctx, u, tx)

	if len(ret) == 0 {
		panic("no return value specified for InsertUser")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.User, port.DBTx) (domain.User, error)); ok {
		return rf(ctx, u, tx)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.User, port.DBTx) domain.User); ok {
		r0 = rf(ctx, u, tx)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.User, port.DBTx) error); ok {
		r1 = rf(ctx, u, tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_InsertUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertUser'
type UserRepo_InsertUser_Call struct {
	*mock.Call
}

// InsertUser is a helper method to define mock.On call
//   - ctx context.Context
//   - u domain.User
//   - tx port.DBTx
func (_e *UserRepo_Expecter) InsertUser(ctx interface{}, u interface{}, tx interface{}) *UserRepo_InsertUser_Call {
	return &UserRepo_InsertUser_Call{Call: _e.mock.On("InsertUser", ctx, u, tx)}
}

func (_c *UserRepo_InsertUser_Call) Run(run func(ctx context.Context, u domain.User, tx port.DBTx)) *UserRepo_InsertUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.User), args[2].(port.DBTx))
	})
	return _c
}

func (_c *UserRepo_InsertUser_Call) Return(_a0 domain.User, _a1 error) *UserRepo_InsertUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepo_InsertUser_Call) RunAndReturn(run func(context.Context, domain.User, port.DBTx) (domain.User, error)) *UserRepo_InsertUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
