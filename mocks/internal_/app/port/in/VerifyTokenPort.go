// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// VerifyTokenPort is an autogenerated mock type for the VerifyTokenPort type
type VerifyTokenPort struct {
	mock.Mock
}

type VerifyTokenPort_Expecter struct {
	mock *mock.Mock
}

func (_m *VerifyTokenPort) EXPECT() *VerifyTokenPort_Expecter {
	return &VerifyTokenPort_Expecter{mock: &_m.Mock}
}

// AccessToken provides a mock function with given fields:
func (_m *VerifyTokenPort) AccessToken() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AccessToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyTokenPort_AccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AccessToken'
type VerifyTokenPort_AccessToken_Call struct {
	*mock.Call
}

// AccessToken is a helper method to define mock.On call
func (_e *VerifyTokenPort_Expecter) AccessToken() *VerifyTokenPort_AccessToken_Call {
	return &VerifyTokenPort_AccessToken_Call{Call: _e.mock.On("AccessToken")}
}

func (_c *VerifyTokenPort_AccessToken_Call) Run(run func()) *VerifyTokenPort_AccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *VerifyTokenPort_AccessToken_Call) Return(_a0 string, _a1 error) *VerifyTokenPort_AccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VerifyTokenPort_AccessToken_Call) RunAndReturn(run func() (string, error)) *VerifyTokenPort_AccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// Ctx provides a mock function with given fields:
func (_m *VerifyTokenPort) Ctx() (context.Context, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ctx")
	}

	var r0 context.Context
	var r1 error
	if rf, ok := ret.Get(0).(func() (context.Context, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyTokenPort_Ctx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ctx'
type VerifyTokenPort_Ctx_Call struct {
	*mock.Call
}

// Ctx is a helper method to define mock.On call
func (_e *VerifyTokenPort_Expecter) Ctx() *VerifyTokenPort_Ctx_Call {
	return &VerifyTokenPort_Ctx_Call{Call: _e.mock.On("Ctx")}
}

func (_c *VerifyTokenPort_Ctx_Call) Run(run func()) *VerifyTokenPort_Ctx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *VerifyTokenPort_Ctx_Call) Return(_a0 context.Context, _a1 error) *VerifyTokenPort_Ctx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VerifyTokenPort_Ctx_Call) RunAndReturn(run func() (context.Context, error)) *VerifyTokenPort_Ctx_Call {
	_c.Call.Return(run)
	return _c
}

// NewVerifyTokenPort creates a new instance of VerifyTokenPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVerifyTokenPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *VerifyTokenPort {
	mock := &VerifyTokenPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
