// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// LoginPort is an autogenerated mock type for the LoginPort type
type LoginPort struct {
	mock.Mock
}

type LoginPort_Expecter struct {
	mock *mock.Mock
}

func (_m *LoginPort) EXPECT() *LoginPort_Expecter {
	return &LoginPort_Expecter{mock: &_m.Mock}
}

// Ctx provides a mock function with given fields:
func (_m *LoginPort) Ctx() (context.Context, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ctx")
	}

	var r0 context.Context
	var r1 error
	if rf, ok := ret.Get(0).(func() (context.Context, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginPort_Ctx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ctx'
type LoginPort_Ctx_Call struct {
	*mock.Call
}

// Ctx is a helper method to define mock.On call
func (_e *LoginPort_Expecter) Ctx() *LoginPort_Ctx_Call {
	return &LoginPort_Ctx_Call{Call: _e.mock.On("Ctx")}
}

func (_c *LoginPort_Ctx_Call) Run(run func()) *LoginPort_Ctx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LoginPort_Ctx_Call) Return(_a0 context.Context, _a1 error) *LoginPort_Ctx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LoginPort_Ctx_Call) RunAndReturn(run func() (context.Context, error)) *LoginPort_Ctx_Call {
	_c.Call.Return(run)
	return _c
}

// Email provides a mock function with given fields:
func (_m *LoginPort) Email() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Email")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginPort_Email_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Email'
type LoginPort_Email_Call struct {
	*mock.Call
}

// Email is a helper method to define mock.On call
func (_e *LoginPort_Expecter) Email() *LoginPort_Email_Call {
	return &LoginPort_Email_Call{Call: _e.mock.On("Email")}
}

func (_c *LoginPort_Email_Call) Run(run func()) *LoginPort_Email_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LoginPort_Email_Call) Return(_a0 string, _a1 error) *LoginPort_Email_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LoginPort_Email_Call) RunAndReturn(run func() (string, error)) *LoginPort_Email_Call {
	_c.Call.Return(run)
	return _c
}

// Password provides a mock function with given fields:
func (_m *LoginPort) Password() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Password")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginPort_Password_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Password'
type LoginPort_Password_Call struct {
	*mock.Call
}

// Password is a helper method to define mock.On call
func (_e *LoginPort_Expecter) Password() *LoginPort_Password_Call {
	return &LoginPort_Password_Call{Call: _e.mock.On("Password")}
}

func (_c *LoginPort_Password_Call) Run(run func()) *LoginPort_Password_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LoginPort_Password_Call) Return(_a0 string, _a1 error) *LoginPort_Password_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LoginPort_Password_Call) RunAndReturn(run func() (string, error)) *LoginPort_Password_Call {
	_c.Call.Return(run)
	return _c
}

// NewLoginPort creates a new instance of LoginPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoginPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoginPort {
	mock := &LoginPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
