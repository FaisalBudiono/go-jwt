// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	domain "FaisalBudiono/go-jwt/internal/app/domain"

	mock "github.com/stretchr/testify/mock"
)

// TokenManager is an autogenerated mock type for the TokenManager type
type TokenManager struct {
	mock.Mock
}

type TokenManager_Expecter struct {
	mock *mock.Mock
}

func (_m *TokenManager) EXPECT() *TokenManager_Expecter {
	return &TokenManager_Expecter{mock: &_m.Mock}
}

// Gen provides a mock function with given fields: u
func (_m *TokenManager) Gen(u domain.User) (domain.Token, error) {
	ret := _m.Called(u)

	if len(ret) == 0 {
		panic("no return value specified for Gen")
	}

	var r0 domain.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.User) (domain.Token, error)); ok {
		return rf(u)
	}
	if rf, ok := ret.Get(0).(func(domain.User) domain.Token); ok {
		r0 = rf(u)
	} else {
		r0 = ret.Get(0).(domain.Token)
	}

	if rf, ok := ret.Get(1).(func(domain.User) error); ok {
		r1 = rf(u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenManager_Gen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Gen'
type TokenManager_Gen_Call struct {
	*mock.Call
}

// Gen is a helper method to define mock.On call
//   - u domain.User
func (_e *TokenManager_Expecter) Gen(u interface{}) *TokenManager_Gen_Call {
	return &TokenManager_Gen_Call{Call: _e.mock.On("Gen", u)}
}

func (_c *TokenManager_Gen_Call) Run(run func(u domain.User)) *TokenManager_Gen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.User))
	})
	return _c
}

func (_c *TokenManager_Gen_Call) Return(_a0 domain.Token, _a1 error) *TokenManager_Gen_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TokenManager_Gen_Call) RunAndReturn(run func(domain.User) (domain.Token, error)) *TokenManager_Gen_Call {
	_c.Call.Return(run)
	return _c
}

// Verify provides a mock function with given fields: accessToken
func (_m *TokenManager) Verify(accessToken string) (string, error) {
	ret := _m.Called(accessToken)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(accessToken)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(accessToken)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenManager_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type TokenManager_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - accessToken string
func (_e *TokenManager_Expecter) Verify(accessToken interface{}) *TokenManager_Verify_Call {
	return &TokenManager_Verify_Call{Call: _e.mock.On("Verify", accessToken)}
}

func (_c *TokenManager_Verify_Call) Run(run func(accessToken string)) *TokenManager_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *TokenManager_Verify_Call) Return(userID string, err error) *TokenManager_Verify_Call {
	_c.Call.Return(userID, err)
	return _c
}

func (_c *TokenManager_Verify_Call) RunAndReturn(run func(string) (string, error)) *TokenManager_Verify_Call {
	_c.Call.Return(run)
	return _c
}

// NewTokenManager creates a new instance of TokenManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenManager {
	mock := &TokenManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
